#coding=UTF-8
'''
#第一步解析私钥文件，发现给了一个因数的高位，那么高位攻击还原p,q
n =26405201714915839490865227813246218372938736243516916108608439705738170543023112509150522274284238701776297205717958250714972924576706985074311737321016048409831557758205687745692399643151467933196930799657476449865271038382866908177517793954543176769652784274788769353482450910551831498252972857285424471782215525406445071432588374802623485148684255853068532820859835479998199886719945699488858505070686919320144576280217196858823521754407597888769668827432569034617434944912323704501156532854074083408527717809315663187405585840074689387865750105223058720511199252150772925124516509254841404742306560035497627834727
pbar =167343506005974003380506069679607737381940204686173214188860057004909006055220516074283090160430833007424970980655748310232878462615469792561310560310363430669700009093597847018287568821792168104155309101449005272958845979198051243961590074525335012299286501320327040500066840279750051116082809592165515132928
kbits =384
PR.<x> = PolynomialRing(Zmod(n))
f = x + pbar
x0 = f.small_roots(X=2^kbits, beta=0.4)[0]
p = x0 + pbar
print(p)
q = n // int(p)
print(q)
'''
#第二步利用p,q,e,c生成私钥文件
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import gmpy2
e=65537
p=167343506005974003380506069679607737381940204686173214188860057004909006055220516074283090160430833007424970980655748310232878462615469792561310560310363430669700009093597847018287568821792168143170329382585883857083334915378884054389878477389765792275111293420203613159303898365894897865177093362621517279751
q=157790417717035275943197904823645145281147085252905247447260034051878691034747684303715336348507267921249655103263347914128144476912685213431110454636244692224328066884510063590700506729345331153483633231327359450199822698241355428609085077662488946173655043172957247264543259611018596088670385591091710018977
n=p*q
d=gmpy2.invert(e,(p-1)*(q-1))
privkey=RSA.construct((int(n),e,int(d)))
f = open('privkey2.pem','wb')
f.write(privkey.export_key())
f.close()

#第三步用私钥文件OAEP解密。
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import base64

cipher_text=open(r"flag.enc","rb").read()
ciphertxt=base64.b64decode(cipher_text)

key=RSA.importKey(open(r"privkey2.pem").read())

cipher=PKCS1_OAEP.new(key)

message=cipher.decrypt(ciphertxt)
print(message)
